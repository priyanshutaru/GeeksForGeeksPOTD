Given two strings S and T, find length of the shortest subsequence in S which is not a subsequence in T. If no such subsequence is possible, return -1. A subsequence is a sequence that appears in the same relative order, but not necessarily contiguous. A string of length n has 2^n different possible subsequences.

 

Example 1:

Input:
S = "babab"
T = "babba"
Output:
3
Explanation:
There are no subsequences of S with
length less than 3 which is not a
subsequence of T. "aab" is an example of
a subsequence of length 3 which isn't a
subsequence of T.
Example 2:

Input:
S = "babhi"
T = "babij"
Output:
1
Explanation:
"h" is a subsequence of S that is
not a subsequence of T.
 

Your Task:
You don't need to read input or print anything. Your task is to complete the function shortestUnSub() which takes two Strings S, and T as input and returns the shortest Uncommon Subsequence.

 

Expected Time Complexity: O(|S|2*|T|)
Expected Auxiliary Space: O(|S|*|T|)

 

Constraints:
1 <= |S|, |T| <= 500


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@.........................Solution....................@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

class Solution {
  public:
  int dp[500][500];
  int helper(string& S,string& T,int i,int j){
      if(i>=S.size()) return 500;
      if(j>=T.size()) return 1;
      if(dp[i][j] !=-1) return dp[i][j];
      int k=j;
      for(;k<T.size();k++){
          if(S[i]==T[k])break;
      }
      if(k==T.size())return 1;
      return dp[i][j] = min(helper(S,T,i+1,j),1+helper(S,T,i+1,k+1));
  }
    int shortestUnSub(string S, string T) {
        memset(dp,-1,sizeof(dp));
        int res =helper(S,T,0,0);
        if(res>=500) return -1;
        return res;
    }
};
