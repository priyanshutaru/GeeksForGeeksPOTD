Given a linked list, the task is to complete the function maxPalindrome() which returns an integer denoting  the length of the longest palindrome list that exist in the given linked list.

Input:
The first line of input contains an integer T denoting the number of test cases. Then T test cases follow. The first line of each test case contains an integer N denoting the size of the linked list . Then in the next line are N space separated values of the given linked list.

Output:
For each test case output will be the required max length of the palindrome present in the given linked list.

User Task:
The task is to complete the function maxPalindrome() which should count the length of longest palindrome in the given list and return it.

Constraints:
1 <= T <= 100
1 <= N <= 100

Example:
Input:
2
7
2 3 7 3 2 12 24
5
12 4 4 3 14

Output:
5
2

Explanation:
Testcase 1: 2 -> 3 -> 7 -> 3 -> 2 is the linked list whose nodes leads to a palindrome as 2 3 7 3 2.

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@.......................Solution.........................@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@2


int count (Node *first, Node *second) 
{
    Node *a = first;
    Node *b = second;
    
    int cnt = 0;
    
    while(a != NULL && b != NULL){
        if(a->data == b->data){
            a = a->next;
            b = b->next;
            cnt++;
        }else{
            break;
        }
    }return cnt;
}
int maxPalindrome(Node *head)
{
    Node *curr = head;
    Node *prev = NULL;

    int ans = 0;
    
    while(curr != NULL){
        Node *next = curr->next;
        curr->next = prev;
        
        ans = max(ans, 2*count(prev, next)+1);
        ans = max(ans, 2*count(curr, next));
        
        prev = curr;
        curr = next;
    }return ans;
}
