Given a string s and a dictionary of words dict of length n, add spaces in s to construct a sentence where each word is a valid dictionary word. Each dictionary word can be used more than once. Return all such possible sentences.

Follow examples for better understanding.

Example 1:

Input: s = "catsanddog", n = 5 
dict = {"cats", "cat", "and", "sand", "dog"}
Output: (cats and dog)(cat sand dog)
Explanation: All the words in the given 
sentences are present in the dictionary.
Example 2:

Input: s = "catsandog", n = 5
dict = {"cats", "cat", "and", "sand", "dog"}
Output: Empty
Explanation: There is no possible breaking 
of the string s where all the words are present 
in dict.
Your Task:
You do not need to read input or print anything. Your task is to complete the function wordBreak() which takes n, dict and s as input parameters and returns a list of possible sentences. If no sentence is possible it returns an empty list.

Expected Time Complexity: O(N2*n) where N = |s|
Expected Auxiliary Space: O(N2)

Constraints:
1 ≤ n ≤ 20
1 ≤ dict[i] ≤ 15
1 ≤ |s| ≤ 500

@@@@@@@@@@@@@@@@@@@@@@@@@@22222...................Solution..................@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


class Solution{
public:
    vector<string> ans;
 
 void solve(string s , set<string> sete, string ch,int x){
     if(x>=s.size()){
         ans.push_back(ch);
         return;
     }
     string pre_ch=ch;;
     string c;
     for(int i=x;i<s.size();i++){
       c+=s[i];  
         
         if(sete.find(c)!=sete.end()){
             
            i==s.size()-1?ch+=c: ch+=c+" ";;
             solve(s,sete,ch,i+1);     
           ch=pre_ch;
          }
         
      }
  
}
 
 vector<string> wordBreak(int n, vector<string>& dict, string s)
    { 
        set<string> sete;
        for(auto x:dict)
            sete.insert(x);
        
        string ch="";
        solve(s,sete,ch,0);    
        return ans;
    }
};
