Given a N x M grid. Find All possible paths from top left to bottom right.From each cell you can either move only to right or down.

Example 1:

Input: 1 2 3
       4 5 6
Output: 1 4 5 6
        1 2 5 6 
        1 2 3 6
Explanation: We can see that there are 3 
paths from the cell (0,0) to (1,2).
Example 2:

Input: 1 2
       3 4
Output: 1 2 4
        1 3 4
Your Task:
You don't need to read input or print anything. Your task is to complete the function findAllPossiblePaths() which takes two integers n,m and grid[][]  as input parameters and returns all possible paths from the top left cell to bottom right cell in a 2d array.

Expected Time Complexity: O(2^N*M)
Expected Auxiliary Space: O(N)


Constraints:
1 <= n,m <= 10 
1 <= grid[i][j] <= n*m
n * m < 20

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@222...............Solution...............@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


class Solution
{
public:
vector<vector<int>>ans;
void fun(vector<vector<int>>&grid,int i,int j,vector<int>&d)
{
    if(i<0 || j<0 || i>=grid.size() || j>=grid[i].size())
    return;
     if(i==grid.size()-1 && j==grid[i].size()-1)
     {
         ans.push_back(d);
         return;
     }
     d.push_back(grid[i][j]);
     fun(grid,i+1,j,d);
     fun(grid,i,j+1,d);
     d.pop_back();
}
   vector<vector<int>> findAllPossiblePaths(int n, int m, vector<vector<int>> &grid)
   {
       // code here
       vector<int>d;
       fun(grid,0,0,d);
       for(int i=0;i<ans.size();i++)
       ans[i].push_back(grid[n-1][m-1]);
       return ans;
   }
};
