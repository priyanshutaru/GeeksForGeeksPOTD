Given two polynomial numbers represented by a linked list. The task is to complete the function addPolynomial() that adds these lists meaning adds the coefficients who have the same variable powers.
Note:  Given polynomials are sorted in decreasing order of power.

Example 1:

Input:
LinkedList1:  (1,x2) 
LinkedList2:  (1,x3)
Output:
1x^3 + 1x^2
Explanation: Since, x2 and x3 both have
different powers as 2 and 3. So, their
coefficient can't be added up.
Example 2:

Input:
LinkedList1:  (1,x3) -> (2,x2)
LinkedList2:  (3,x3) -> (4,x2)
Output:
4x^3 + 6x^2
Explanation: Since, x3 has two different
coefficients as 3 and 1. Adding them up
will lead to 4x3. Also, x2 has two
coefficients as 4 and 2. So, adding them
up will give 6x2.
Your Task:
The task is to complete the function addPolynomial() which should add the polynomial with same powers return the required polynomial in decreasing order of the power in the form of a linked list.
Note: Try to solve the question without using any extra space.

Expected Time Complexity: O(N+M)
Expected Auxiliary Space: O(1)

Constraints:
1 <= N, M <= 105
1 <= x, y <= 106


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@..................Solution......................@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@2


class Solution{
 public:
   /* The below method print the required sum of polynomial
   p1 and p2 as specified in output  */
   Node* addPolynomial(Node *p1, Node *p2)
   {
       //Your code here
       
       if(p1==NULL)  return p2;
   
       if(p2==NULL)  return p1;
       
       Node *a=NULL;
       Node *b=NULL;
       

 //reverse both linked lists & have starting value in a &b
       reverse(p1,NULL,NULL,a);
       reverse(p2,NULL,NULL,b);

 

   
       Node *temp_ans= solve(a,b);
       Node *ans=NULL;
       
       reverse(temp_ans,NULL,NULL,ans);
       return ans;
   }
   
   Node* solve(Node *a,Node *b){
       
       if(a==NULL)  return b;
       
       if(b==NULL)   return a;
      

//if power is same add values
       if(a->pow==b->pow){
           a->coeff=b->coeff+a->coeff;
           a->next=solve(a->next,b->next);
           return a;
       }  

 

//if pow is different we have to take smaller power node 


     else  if(a->pow<b->pow){
           a->next=solve(a->next,b);
           return a;
       } 
      else{
           b->next=solve(a,b->next);
           return b;
       }   
   }
   
   void reverse(Node *head,Node *prev,Node *after,Node* &a){
       
       if(head->next==NULL){
           a=head;
           head->next=prev;
           return ;
       }
       after=head->next;
       head->next=prev;
       reverse(after,head,after->next,a);
   }
};
