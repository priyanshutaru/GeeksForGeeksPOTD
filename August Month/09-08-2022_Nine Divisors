Find the count of numbers less than equal to N having exactly 9 divisors.
 

Example 1:

Input:
N = 100
Output:
2
Explanation:
The two numbers which have 
exactly 9 divisors are 36 and 100.
Example 2:

Input:
N = 1000
Output:
8 
Explanation:
The numbers are:
36 100 196 225 256 441 484 676

Your Task:  
You don't need to read input or print anything. Your task is to complete the function nineDivisors() which takes an integer N as an input parameter and returns the total number of elements from 1 to N inclusive, that have exactly 9 divisors.

Expected Time Complexity: O(sqrt(N))
Expected Auxiliary Space:  O(sqrt(N))
 

Constraints:
1<=N<=1010


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@2...................Solution.....................@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@22


class Solution{   
public:
    long long int nineDivisors(long long int N){
        //Code Here
        int sN = sqrt(N);
        vector<bool> prime(sN+1,true);
        for(int i=2;i<=sqrt(sN)+1;i++){
            if(prime[i])
            for(int j=i*i;j<=sN;j+=i){
                 prime[j]=0;
            }
        }
        vector<int> primes;
        for(int i=2;i<=sN;i++){
            if(prime[i])    primes.push_back(i);
        }
        
        int primesSize = primes.size();
        int ans=0;
        for(int i=0;i<primesSize;i++){
            long long notExceed  = sqrt(N)/primes[i];
            ans += (upper_bound(primes.begin(),primes.begin()+i,notExceed) - primes.begin());
        }
        for(int i=0;i<primesSize;i++){
            long long sq = primes[i]*primes[i];
            if(sq*sq*sq*sq <= N) ans++;
            else break;
        }
        return ans;
    }
};

