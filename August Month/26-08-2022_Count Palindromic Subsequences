Given a string str of length N, you have to find number of palindromic subsequence (need not necessarily be distinct) which could be formed from the string str.
Note: You have to return the answer module 109+7;
 

Example 1:

Input: 
Str = "abcd"
Output: 
4
Explanation:
palindromic subsequence are : "a" ,"b", "c" ,"d"
 

Example 2:

Input: 
Str = "aab"
Output: 
4
Explanation:
palindromic subsequence are :"a", "a", "b", "aa"
 

Your Task:
You don't need to read input or print anything. Your task is to complete the function countPs() which takes a string str as input parameter and returns the number of palindromic subsequence.
 

Expected Time Complexity: O(N*N)
Expected Auxiliary Space: O(N*N)

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@22.........................Solution.....................@@@@@@@@@@@@@@@@@@@@@@@@@@@2


class Solution{
    public:
    /*You are required to complete below method */
    long long int  countPS(string str)
    {
       //Your code here
       int n=str.size();   
        
        long long int m=1000000007;
        vector<vector<long long int>> dp(n,vector<long long int>(n,0));
        for(int i=0;i<n;i++){
            dp[i][i]=1;
            
        }
        
        
        
        for(int i=1;i<n;i++){
            for(int j=0;j+i<n;j++){
               if(str[j]==str[j+i]){
                   dp[j][j+i]=(1+(dp[j+1][j+i])+(dp[j][j+i-1]))%m;
                   
               }
               else{
                   dp[j][j+i]=(((dp[j+1][j+i])+(dp[j][j+i-1]))-(dp[j+1][j+i-1]) +m)%m;
               }
              
               
            }
        }
         
        return dp[0][n-1];
    }
     
};
